I"˚<p>Here‚Äôs a file. It contains a series of integer values, stored as binary. I‚Äôd like you to do some processing of each value. How would you do it?</p>

<p>You decide to inspect the file contents:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; cat .\nums.bin
S)IÔøΩ"ÔøΩaÔøΩ:ZÔøΩWÔøΩx
</code></pre></div></div>

<p>Hmm. Not too helpful. So‚Ä¶what now? If you‚Äôve been programming for a while, you‚Äôre probably going to rub your hands together, fire up your favorite hex editor / viewer and verify what we‚Äôre actually dealing with here. Then you will probably start coding a solution.</p>

<p>If you‚Äôre one of an alarming number of recent computer science grads, you may be more likely to break out into a cold sweat. If accomplishing the task is tied to something important, like, say, doing well on a programming interview, you might start to panic a bit.</p>

<p>In a <a href="/programming,/interviewing/2019/03/11/BitAndBytesPart1/">previous post</a> I discussed the experience of interviewing multiple bright young computer science majors who struggled to write a program to work with simple binary data.</p>

<p>Specifically, we discussed a recurring pattern where the candidate does not understand that ‚Äú32-bit integers‚Äù stored as ‚Äúbinary data‚Äù in a file will require them to read the actual byte values that make up those integers.</p>

<p>Text files. That‚Äôs what the kids know how to read, to the point they conclude that a file containing ‚Äò32-bit‚Äô integers must mean the data is a textual sequences of 32 ‚Äò1‚Äô and ‚Äò0‚Äô characters.</p>

<p>We cringe. Yet they seem not to know any better.</p>

<p>I should be clear that such candidates are not the majority; just, that there are enough of them now that it has the appearance of a trend.</p>

<p>Initially exasperating, I‚Äôve come to a state of understanding: it seems to be the case that we are not reinforcing the most essential knowledge of how computers work, at least for a not-entirely-trivial portion of students.</p>

<p>Bits and bytes. They are fundamental.</p>

<h2 id="what-i-would-prefer-you-knew">What I would prefer you knew</h2>
<p>If you are interviewing with me, what I <em>hope</em> you know are these basics:</p>
<ul>
  <li>You know what bits are.</li>
  <li>You know what bytes are.</li>
  <li>You know your basic powers of two.</li>
  <li>You understand how hexadecimal works.</li>
  <li>If I give you a binary, hexadecimal or decimal number you can find a way to convert from one to the other.</li>
  <li>You understand the basics of how computer memory works.</li>
  <li>You understand what a file is.</li>
  <li>You have an idea of the difference between a ‚Äòtext‚Äô file and a ‚Äòbinary‚Äô file.</li>
  <li>If you had to read bytes from a file, or write bytes to a file, you would know how to do it <em>conceptually</em>.</li>
</ul>

<p>Those are the basics.</p>

<p>When I ask my usual interview question, I go out of my way to tell the candidate that I want them to think about how they would solve the problem from a practical standpoint. Meaning: if I actually gave them a computer and a couple of files to process and told them I just needed the answer by the end of the day: how would they <em>actually</em> solve the problem? I‚Äôm not interested in a protracted discussion about theoretical algorithmic complexity accompanied by proofs. Yes, yes, I know you studied all that stuff to death in college. I know it‚Äôs useful. Here, however, we are talking about actual programming to solve a problem, not theory.</p>

<p>I mentioned being able to convert between the three most common bases (base 2, base 16, base 10) that we use as programmers. Do I require that you be able to do these conversions lightning fast in your head under pressure? No! I‚Äôm terrible at arithmetic; I couldn‚Äôt do that. I just care that you have some concept of how to go from, say, 0x222E0 to it‚Äôs decimal equivalent (140,000). Using a calculator is fine. Using a programming language is fine. The point is that when working with computers we very often need to convert between representations using actual data: numbers. Bytes. Individual bit patterns (i.e., flags and masks.)</p>

<p>Similarly I called out the need to have a conceptual idea of how to read from files or write to files. I never particularly care if you remember exactly how the API works: language or platform specific details can always be looked up in a reference. The idea, the concept, though‚Ä¶you should be able to sketch out what such an API might look like. Know what a buffer is. Know the concept of a stream interface. Be able to articulate how you might know when you‚Äôve read to the end of a file. These are basic concepts I wish you knew.</p>

<h2 id="bonus-knowledge">Bonus knowledge</h2>
<p>Some years back it would have been pretty unthinkable that graduating seniors who had studied computer science would not know this stuff completely cold. The world has changed.</p>

<p>Here is the bonus stuff, which while still quite fundamental is not quite as essential:</p>
<ul>
  <li>Endianness</li>
  <li>Signed vs. unsigned values (Two‚Äôs complement)</li>
  <li>Encodings: ASCII, UTF8, UTF16</li>
  <li>Floating point</li>
</ul>

<p>If you don‚Äôt have much knowledge of the above now, believe me, you will after a few years writing real-world code. Better to get some familiarity sooner rather than later.</p>

<h2 id="conclusion">Conclusion</h2>
<p>I covered what I consider some really fundamental, bare-minimum concepts I really wish you knew before interviewing for a programming job. This knowledge will complement the <em>really</em> crucial skills I‚Äôm looking for:</p>
<ul>
  <li>Critical thinking.</li>
  <li>Problem solving.</li>
  <li>Creativity</li>
  <li>Tenacity.</li>
</ul>

<p>If you have the fundamentals, we can speak the same language. I can explain that I‚Äôm asking you to process a disk file that is just a sequence of integers.</p>

<p>I will probably even show you exactly what the raw data looks like:</p>

<p><img src="/images/numbers1.png" alt="Binary Data" /></p>
:ET